### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Article {
  comments: [ArticleComment!]
  content: String!
  createdAt: DateTime!
  id: Int!
  isPublished: Boolean!
  label: String!
  publishedBy: Writer
  updatedAt: DateTime!
}

type ArticleComment {
  content: String!
  createdAt: DateTime!
  id: Int!
  isValidated: Boolean!
  note: Int
  publishedBy: Writer
  publishedOn: Article
}

type AuthPayload {
  token: String!
  writer: Writer!
}

type Category {
  id: Int!
  label: String!
  writers: [Writer]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Follow {
  followed: Writer
  following: Writer
  id: Int!
}

type Image {
  createdAt: DateTime!
  id: Int!
  ownedBy: Writer
  url: String!
}

type Mutation {
  addOneImage(url: String!): Image!
  changeArticleVisibility(id: Int!, isPublished: Boolean!): Article!
  createOneArticle(content: String!, isPublished: Boolean!, label: String!): Article!
  createOneArticleComment(articleId: Int!, content: String!, note: Int): ArticleComment!
  createOneCategory(label: String!): Category!
  createOneWriterComment(content: String!, note: Int, writerIdBeingCommented: Int!): WriterComment!
  deleteOneArticle(id: Int!): Article!
  deleteOneArticleComment(commentId: Int!): WriterComment!
  deleteOneCategory(label: String!): Category!
  deleteOneImage(id: Int!): Image!
  deleteRelation(id: Int!): Follow!
  followWriter(writerIdToFollow: Int!): Follow!
  login(email: String!, password: String!): AuthPayload!
  passwordLost(email: String!, password: String!): AuthPayload!
  signup(blogLabel: String!, categoryId: Int!, description: String!, email: String!, password: String!, pseudo: String!): AuthPayload!
  stopFollowingWriter(writerIdToStopFollowing: Int!): Follow!
  updateOneArticle(content: String!, id: Int!, isPublished: Boolean!, label: String!): Article!
  updateOneArticleComment(commentId: Int!, content: String!, note: Int): ArticleComment!
  updateOneCategory(label: String!): Category!
  updateOneWriterComment(commentId: Int!, content: String!, note: Int): WriterComment!
  updateWriter(blogLabel: String!, description: String!, pseudo: String!): Writer!
  updateWriterAvatar(url: String!): Writer!
  validateOneComment(commentId: Int!): WriterComment!
}

type Query {
  autoLogin(token: String!): Writer
  getAllArticles(skip: Int, take: Int): [Article!]!
  getAllCategories: [Category!]!
  getAllComments: [ArticleComment!]!
  getAllFollow: [Follow!]!
  getAllImages: [Image]
  getAllImagesFromWriter: [Image]
  getAllWriterComments: [WriterComment!]!
  getAllWriters(categoryId: Int): [Writer!]!
  getOneArticle(id: Int!): Article
  getOneCategory(id: Int!): Category
  getOneComment(commentId: Int!): ArticleComment
  getOneImage(id: Int!): Image
  getOneWriter(writerId: Int!): Writer
  getOneWritterComment(commentId: Int!): WriterComment
}

type Subscription {
  newArticleComment: ArticleComment
  newFollower: Follow
  newWriterComment: WriterComment
}

type Writer {
  articles: [Article]
  avatar: String!
  blogLabel: String!
  category: Category
  commentsFromWriters: [ArticleComment]
  commentsOnArticles: [ArticleComment]
  commentsOnWriters: [ArticleComment]
  createdAt: DateTime!
  description: String!
  email: String!
  followers: [Follow]
  following: [Follow]
  id: Int!
  images: [Image]
  password: String!
  pseudo: String!
  role: String!
}

type WriterComment {
  content: String!
  createdAt: DateTime!
  id: Int!
  isValidated: Boolean!
  note: Int
  writtenBy: Writer
  writtenOn: Writer
}